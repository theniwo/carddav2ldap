#!/bin/bash
if [[ "${DEBUG,,}" == "true" ]]; then
	echo "DEBUGGING MODE ACTIVE"
fi
# --- Source environment variables from the file generated by entrypoint ---
ENV_FILE="/etc/container_environment.sh"
if [ -f "$ENV_FILE" ]; then
    echo "$(date): Sourcing environment variables from $ENV_FILE"
    . "$ENV_FILE" # Use '.' for sourcing
else
    echo "$(date): WARNING: Environment file $ENV_FILE not found. Variables might be missing."
fi

# --- Logging Einstellungen ---
# Dies ist der Standard-Pfad, wenn LOG_FILE nicht gesetzt ist oder ungültig ist.
DEFAULT_FILE_LOG_PATH="/var/log/carddav2ldap/sync_output.log"
# Dies wird der tatsächliche Pfad sein, in den tee schreibt.
ACTIVE_FILE_LOG_PATH=""

# Bestimmen, ob das Logging in eine Datei aktiv sein soll und setzen Sie den Pfad.
# Überprüft, ob LOG_FILE Umgebungsvariable gesetzt ist und nicht "False" (case-insensitive) oder leer ist.
if [[ -n "${LOG_FILE}" && "${LOG_FILE,,}" != "false" ]]; then
    ACTIVE_FILE_LOG_PATH="${LOG_FILE}"
    # Stellen Sie sicher, dass das Verzeichnis existiert, bevor Sie in die Log-Datei schreiben.
    #mkdir -p "$(dirname "$ACTIVE_FILE_LOG_PATH")"
    echo "$(date): File logging enabled. Output also written to: ${ACTIVE_FILE_LOG_PATH}"
else
    echo "$(date): File logging disabled (LOG_FILE not set or set to 'false')."
    # Wenn das Dateil-Logging deaktiviert ist, leiten Sie tee's Dateiausgabe nach /dev/null um.
    ACTIVE_FILE_LOG_PATH="/dev/null"
fi

# Diese Funktion leitet ihre Eingabe über `tee` weiter.
# Sie stellt sicher, dass die Ausgabe immer an stdout (für Docker-Logs) geht
# und optional an die angegebene Log-Datei.
log_and_tee() {
    # `cat` ist nötig, da tee Eingabe von stdin erwartet.
    # Die Ausgabe von `tee` wird dann an `/dev/stdout` geleitet,
    # was vom Cronjob-Redirect zu `/proc/1/fd/1` erfasst wird.
    # `tee -a` schreibt in die tatsächliche Log-Datei (oder /dev/null, wenn deaktiviert).
    cat | tee -a "$ACTIVE_FILE_LOG_PATH" >> /dev/stdout
}

# Verwenden Sie nun diese Funktion, um alle Befehlsausgaben zu wrappen, die Sie loggen möchten.
echo "$(date): Starting carddav2ldap synchronization script..." | log_and_tee

# --- DEBUGGING-SCHRITT: Umgebungsvariablen ausgeben ---
if [[ "${DEBUG,,}" == "true" ]]; then
	echo "$(date): --- Environment variables at script start (after sourcing) ---" | log_and_tee
	env | log_and_tee # Leiten Sie die Ausgabe von 'env' durch die Logging-Funktion
	echo "$(date): ----------------------------------------------------" | log_and_tee
fi
# --- ENDE DEBUGGING-SCHRITT ---

# Führen Sie das Python-Skript aus. Seine stdout/stderr wird durch log_and_tee geleitet.
# Hinweis: 2>&1 muss VOR der Pipe stehen, sonst wird nur stdout geleitet.
/usr/local/bin/python /app/sync_script.py 2>&1 | log_and_tee

echo "$(date): CardDAV to LDAP synchronization script finished." | log_and_tee
