#!/bin/bash

# --- Sourcing environment variables from the file generated by entrypoint ---
# This ensures all environment variables passed by Docker Compose are available.
ENV_FILE="/etc/container_environment.sh"
# Use /dev/stderr for this message so it's always visible in Docker logs if sourcing fails.
if [ -f "$ENV_FILE" ]; then
    echo "$(date): Sourcing environment variables from $ENV_FILE" >&2
    . "$ENV_FILE" # Use '.' for sourcing
else
    echo "$(date): ERROR: Environment file $ENV_FILE not found. Variables will be missing." >&2
    exit 1 # Exit if environment file is critical and missing
fi

# Activate debugging messages if DEBUG is set to "true" (case-insensitive)
if [[ "${DEBUG,,}" == "true" ]]; then
    echo "$(date): DEBUGGING MODE ACTIVE" # Added debugging mode active message
fi

# Determine if sensitive information should be censored in logs (default to true for security)
# CENSOR_SECRETS_IN_LOGS can be "true" or "false" (case-insensitive)
CENSOR_SECRETS_IN_LOGS_ENABLED=true
if [[ -n "${CENSOR_SECRETS_IN_LOGS}" && "${CENSOR_SECRETS_IN_LOGS,,}" == "false" ]]; then
    CENSOR_SECRETS_IN_LOGS_ENABLED=false
fi

# --- Logging Settings ---
# This is the default path if LOG_FILE is not set or invalid.
DEFAULT_FILE_LOG_PATH="/var/log/carddav2ldap/sync_output.log"
# This will be the actual path where tee writes.
ACTIVE_FILE_LOG_PATH=""

# Determine if file logging should be active and set the path.
# Logic:
# 1. If LOG_FILE is empty or "false", disable logging (/dev/null).
# 2. If LOG_FILE is "true", use the default path.
# 3. Otherwise (custom path), use the value of LOG_FILE.
if [[ "${LOG_FILE,,}" == "false" || -z "${LOG_FILE}" ]]; then
    # File logging disabled (LOG_FILE not set or set to 'False'/'false').
    echo "$(date): File logging disabled (LOG_FILE not set or set to 'False'/'false')." | tee /dev/stdout
    ACTIVE_FILE_LOG_PATH="/dev/null"
elif [[ "${LOG_FILE,,}" == "true" ]]; then
    # LOG_FILE is explicitly set to true, use the default path.
    ACTIVE_FILE_LOG_PATH="${DEFAULT_FILE_LOG_PATH}"
    mkdir -p "$(dirname "$ACTIVE_FILE_LOG_PATH")"
    echo "$(date): File logging enabled (using default path: ${ACTIVE_FILE_LOG_PATH})." | tee -a "$ACTIVE_FILE_LOG_PATH"
else
    # LOG_FILE is set to a custom path.
    ACTIVE_FILE_LOG_PATH="${LOG_FILE}"
    mkdir -p "$(dirname "$ACTIVE_FILE_LOG_PATH")"
    echo "$(date): File logging enabled. Output also written to: ${ACTIVE_FILE_LOG_PATH}" | tee -a "$ACTIVE_FILE_LOG_PATH"
fi


# This function pipes its input via `tee`.
# It ensures that output always goes to stdout (for Docker logs)
# and optionally to the specified log file.
log_and_tee() {
    # `cat` is needed because tee expects input from stdin.
    # `tee -a` writes to the actual log file (or /dev/null if disabled).
    # The output of `tee` (its own stdout) is then captured by the main cron job redirect.
    cat | tee -a "$ACTIVE_FILE_LOG_PATH"
}

# Use this function now to wrap all command outputs you want to log.
echo "$(date): Starting carddav2ldap synchronization script..." | log_and_tee

# --- DEBUGGING STEP (ONLY to file log, NOT Docker logs) ---
# These outputs are only written to the log file to keep Docker logs clean.
# Only execute if DEBUG is explicitly set to 'true' AND file logging is active.
if [[ "${DEBUG,,}" == "true" && "$ACTIVE_FILE_LOG_PATH" != "/dev/null" ]]; then
    echo "$(date): --- Environment variables at script start (after sourcing) ---" >> "$ACTIVE_FILE_LOG_PATH"
    # Censor sensitive environment variables if enabled
    if [[ "$CENSOR_SECRETS_IN_LOGS_ENABLED" == "true" ]]; then
        env | sed -E 's/^(LDAP_PASSWORD|CARDDAV_PASSWORD)=.*/\1=[REDACTED]/g' >> "$ACTIVE_FILE_LOG_PATH"
    else
        env >> "$ACTIVE_FILE_LOG_PATH" # Redirect 'env' output directly to the log file
    fi
    echo "$(date): ----------------------------------------------------" >> "$ACTIVE_FILE_LOG_PATH"
fi
# --- END DEBUGGING STEP ---

# Execute the Python script. Its stdout/stderr will be piped through log_and_tee.
# Note: 2>&1 must come BEFORE the pipe, otherwise only stdout is piped.
/usr/local/bin/python /app/sync_script.py 2>&1 | log_and_tee

echo "$(date): CardDAV to LDAP synchronization script finished." | log_and_tee

